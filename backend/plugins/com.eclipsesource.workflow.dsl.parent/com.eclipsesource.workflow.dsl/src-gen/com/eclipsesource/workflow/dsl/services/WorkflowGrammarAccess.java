/*
 * generated by Xtext 2.17.1
 */
package com.eclipsesource.workflow.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WorkflowGrammarAccess extends AbstractGrammarElementFinder {
	
	public class WorkflowConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.eclipsesource.workflow.dsl.Workflow.WorkflowConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModelFQNParserRuleCall_2_0 = (RuleCall)cModelAssignment_2.eContents().get(0);
		private final Assignment cProbConfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProbConfProbabilityConfigurationParserRuleCall_3_0 = (RuleCall)cProbConfAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAssertionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAssertionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAssertionsAssertionParserRuleCall_4_1_0 = (RuleCall)cAssertionsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cAssertionsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cAssertionsAssertionParserRuleCall_4_2_1_0 = (RuleCall)cAssertionsAssignment_4_2_1.eContents().get(0);
		
		//WorkflowConfiguration:
		//	'workflowModel' ':' model=FQN
		//	probConf=ProbabilityConfiguration? ('assertions' assertions+=Assertion (',' assertions+=Assertion)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'workflowModel' ':' model=FQN probConf=ProbabilityConfiguration? ('assertions' assertions+=Assertion (','
		//assertions+=Assertion)*)?
		public Group getGroup() { return cGroup; }
		
		//'workflowModel'
		public Keyword getWorkflowModelKeyword_0() { return cWorkflowModelKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//model=FQN
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//FQN
		public RuleCall getModelFQNParserRuleCall_2_0() { return cModelFQNParserRuleCall_2_0; }
		
		//probConf=ProbabilityConfiguration?
		public Assignment getProbConfAssignment_3() { return cProbConfAssignment_3; }
		
		//ProbabilityConfiguration
		public RuleCall getProbConfProbabilityConfigurationParserRuleCall_3_0() { return cProbConfProbabilityConfigurationParserRuleCall_3_0; }
		
		//('assertions' assertions+=Assertion (',' assertions+=Assertion)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'assertions'
		public Keyword getAssertionsKeyword_4_0() { return cAssertionsKeyword_4_0; }
		
		//assertions+=Assertion
		public Assignment getAssertionsAssignment_4_1() { return cAssertionsAssignment_4_1; }
		
		//Assertion
		public RuleCall getAssertionsAssertionParserRuleCall_4_1_0() { return cAssertionsAssertionParserRuleCall_4_1_0; }
		
		//(',' assertions+=Assertion)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//assertions+=Assertion
		public Assignment getAssertionsAssignment_4_2_1() { return cAssertionsAssignment_4_2_1; }
		
		//Assertion
		public RuleCall getAssertionsAssertionParserRuleCall_4_2_1_0() { return cAssertionsAssertionParserRuleCall_4_2_1_0; }
	}
	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.eclipsesource.workflow.dsl.Workflow.Assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBeforeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBeforeFQNParserRuleCall_0_0 = (RuleCall)cBeforeAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAfterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAfterFQNParserRuleCall_2_0 = (RuleCall)cAfterAssignment_2.eContents().get(0);
		
		//Assertion:
		//	before=FQN '=>' after=FQN;
		@Override public ParserRule getRule() { return rule; }
		
		//before=FQN '=>' after=FQN
		public Group getGroup() { return cGroup; }
		
		//before=FQN
		public Assignment getBeforeAssignment_0() { return cBeforeAssignment_0; }
		
		//FQN
		public RuleCall getBeforeFQNParserRuleCall_0_0() { return cBeforeFQNParserRuleCall_0_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//after=FQN
		public Assignment getAfterAssignment_2() { return cAfterAssignment_2; }
		
		//FQN
		public RuleCall getAfterFQNParserRuleCall_2_0() { return cAfterFQNParserRuleCall_2_0; }
	}
	public class ProbabilityConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.eclipsesource.workflow.dsl.Workflow.ProbabilityConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cProbabilitiesKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLowKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cLowAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cLowFloatParserRuleCall_0_3_0 = (RuleCall)cLowAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cMediumKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMediumAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMediumFloatParserRuleCall_1_2_0 = (RuleCall)cMediumAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHighKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cHighAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cHighFloatParserRuleCall_2_2_0 = (RuleCall)cHighAssignment_2_2.eContents().get(0);
		
		//ProbabilityConfiguration:
		//	('probabilities' 'low' ':' low=Float) ('medium' ':' medium=Float) ('high' ':' high=Float);
		@Override public ParserRule getRule() { return rule; }
		
		//('probabilities' 'low' ':' low=Float) ('medium' ':' medium=Float) ('high' ':' high=Float)
		public Group getGroup() { return cGroup; }
		
		//'probabilities' 'low' ':' low=Float
		public Group getGroup_0() { return cGroup_0; }
		
		//'probabilities'
		public Keyword getProbabilitiesKeyword_0_0() { return cProbabilitiesKeyword_0_0; }
		
		//'low'
		public Keyword getLowKeyword_0_1() { return cLowKeyword_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//low=Float
		public Assignment getLowAssignment_0_3() { return cLowAssignment_0_3; }
		
		//Float
		public RuleCall getLowFloatParserRuleCall_0_3_0() { return cLowFloatParserRuleCall_0_3_0; }
		
		//'medium' ':' medium=Float
		public Group getGroup_1() { return cGroup_1; }
		
		//'medium'
		public Keyword getMediumKeyword_1_0() { return cMediumKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//medium=Float
		public Assignment getMediumAssignment_1_2() { return cMediumAssignment_1_2; }
		
		//Float
		public RuleCall getMediumFloatParserRuleCall_1_2_0() { return cMediumFloatParserRuleCall_1_2_0; }
		
		//'high' ':' high=Float
		public Group getGroup_2() { return cGroup_2; }
		
		//'high'
		public Keyword getHighKeyword_2_0() { return cHighKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//high=Float
		public Assignment getHighAssignment_2_2() { return cHighAssignment_2_2; }
		
		//Float
		public RuleCall getHighFloatParserRuleCall_2_2_0() { return cHighFloatParserRuleCall_2_2_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.eclipsesource.workflow.dsl.Workflow.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.eclipsesource.workflow.dsl.Workflow.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Float ecore::EFloat:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	private final WorkflowConfigurationElements pWorkflowConfiguration;
	private final AssertionElements pAssertion;
	private final ProbabilityConfigurationElements pProbabilityConfiguration;
	private final FQNElements pFQN;
	private final FloatElements pFloat;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WorkflowGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWorkflowConfiguration = new WorkflowConfigurationElements();
		this.pAssertion = new AssertionElements();
		this.pProbabilityConfiguration = new ProbabilityConfigurationElements();
		this.pFQN = new FQNElements();
		this.pFloat = new FloatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.eclipsesource.workflow.dsl.Workflow".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//WorkflowConfiguration:
	//	'workflowModel' ':' model=FQN
	//	probConf=ProbabilityConfiguration? ('assertions' assertions+=Assertion (',' assertions+=Assertion)*)?;
	public WorkflowConfigurationElements getWorkflowConfigurationAccess() {
		return pWorkflowConfiguration;
	}
	
	public ParserRule getWorkflowConfigurationRule() {
		return getWorkflowConfigurationAccess().getRule();
	}
	
	//Assertion:
	//	before=FQN '=>' after=FQN;
	public AssertionElements getAssertionAccess() {
		return pAssertion;
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}
	
	//ProbabilityConfiguration:
	//	('probabilities' 'low' ':' low=Float) ('medium' ':' medium=Float) ('high' ':' high=Float);
	public ProbabilityConfigurationElements getProbabilityConfigurationAccess() {
		return pProbabilityConfiguration;
	}
	
	public ParserRule getProbabilityConfigurationRule() {
		return getProbabilityConfigurationAccess().getRule();
	}
	
	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//Float ecore::EFloat:
	//	INT '.' INT;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
